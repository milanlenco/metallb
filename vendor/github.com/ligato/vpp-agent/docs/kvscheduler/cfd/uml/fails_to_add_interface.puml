@startuml

skinparam ParticipantPadding 20
skinparam BoxPadding 10
skinparam SequenceMessageAlign center

participant ID as "Interface Descriptor \n(Interface Model COLLAPSED)"
participant KVS as "KVScheduler"
participant ORCH as "Orchestrator \n(NB COLLAPSED)"

ID -> KVS: **RegisterKVDescriptor**()
activate KVS
 KVS --> ID: ok
deactivate KVS

== Resync Transaction #0 (fails to configure //my-tap// interface) ==

ORCH -> ORCH: **start startup resync**
activate ORCH
ORCH -> KVS: **Resync Txn** = [\l - interface //my-tap// with IP 196.168.1.1/24\l ]

activate KVS  #FFBBBB
KVS -> KVS: **start graph refresh**
 activate KVS  #FFBFDD
  KVS -> ID: **Retrieve**()
   activate ID
    ID --> KVS: retrieved interfaces = [ //local0// (OBTAINED)]
   deactivate ID
  KVS -> KVS: **save refreshed graph**
 deactivate KVS

KVS -> KVS: **start txn**
 activate KVS  #FFDDCC
  KVS -> KVS: //local0// is OBTAINED => **not to be removed** by resync
 KVS -> ID: **KeySelector**(//my-tap//)
  activate ID
   ID --> KVS: true
  deactivate ID
 KVS -> KVS: value is **handled by** InterfaceDescriptor
 KVS -> ID: **Dependencies**(//my-tap//)
  activate ID
   ID --> KVS: << no dependencies >>
  deactivate ID
 KVS -> KVS: value //my-tap// is **ready** to be created
 KVS -> ID: **Validate**(//my-tap//)
  activate ID
   ID --> KVS: ok (valid configuration)
  deactivate ID
 KVS -> ID: **Create**(//my-tap//)
  activate ID
   ID --> KVS: error
  destroy ID
 KVS -> ID: **IsRetriableFailure**(error)
  activate ID
   ID --> KVS: true (KVScheduler is allowed to retry the failed operation)
  deactivate ID
 KVS -> KVS: set the state of the value //my-tap// to **RETRYING**
 
== Transaction failed, scheduling retry (best-effort mode, not-reverting already executed changes) ==
 
 KVS -> KVS: **Refresh** the failed value to learn its state \n - needed to determine the retry operation
  activate KVS  #FFBFDD
   KVS -> ID: **Retrieve**()
    activate ID
     ID --> KVS: retrieved interfaces = [ //local0// (OBTAINED)] \n (//my-tap// not configured => retry == **Create()**)
    deactivate ID
   KVS -> KVS: **save refreshed values**
  deactivate KVS 
 
 KVS -> KVS: **finalize and record txn** (together with the error)
 deactivate KVS

 note over KVS: [[https://raw.githubusercontent.com/milanlenco/vpp-agent/kvs-docs/docs/kvscheduler/cfd/graph/interface_retrying.svg?sanitize=true Graph after transaction]]

KVS --> ORCH: **value state updates**
KVS --> ORCH: **txn error** (non-nil)
deactivate KVS
deactivate ORCH

== Retry Transaction #1 (re-try to apply //my-tap// interface) ==

KVS -> KVS: **trigger Re-try txn** for //my-tap// (after configured time delay)
 activate KVS #EEEEDD
  KVS -> KVS: (**cached**) value //my-tap// is **handled by** InterfaceDescriptor
  KVS -> ID: **Dependencies**(//my-tap//)
   activate ID
    ID --> KVS: << no dependencies >>
   deactivate ID
  KVS -> KVS: value //my-tap// is **ready** to be created
  KVS -> ID: **Validate**(//my-tap//)
   activate ID
    ID --> KVS: ok (valid configuration)
   deactivate ID
  KVS -> ID: **Create**(my-tap)
   activate ID
    ID --> KVS: ok (**retry helped**)
   deactivate ID

  KVS -> ID: **DerivedValues**(//my-tap//)
   activate ID
    ID --> KVS: derived-values = [ //"address/my-tap/192.168.1.1/24"//]
   deactivate ID
   KVS -> KVS: **schedule create** for //"address/my-tap/192.168.1.1/24"//
   KVS -> ID: **KeySelector**(//"address/my-tap/192.168.1.1/24"//)
   activate ID
    ID --> KVS: false
   deactivate ID
  KVS -> KVS: //"address/my-tap/192.168.1.1/24"// is **property** \n (without CRUD operations)

  KVS -> KVS: **finalize and record txn**
 deactivate KVS

 note over KVS: [[https://raw.githubusercontent.com/milanlenco/vpp-agent/kvs-docs/docs/kvscheduler/cfd/graph/interface_created.svg?sanitize=true Graph after transaction]]

KVS --> ORCH: **value state updates**

@enduml