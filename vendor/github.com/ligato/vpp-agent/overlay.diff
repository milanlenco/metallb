diff --git a/plugins/kvscheduler/api/txn_options.go b/plugins/kvscheduler/api/txn_options.go
index 91b1fe3..e515824 100644
--- a/plugins/kvscheduler/api/txn_options.go
+++ b/plugins/kvscheduler/api/txn_options.go
@@ -38,9 +38,13 @@ const (
 	// the context.
 	revertCtxKey
 
-	// txnDescriptionKey is a key under which transaction description is stored
+	// txnDescriptionCtxKey is a key under which transaction description is stored
 	// into the context.
-	txnDescriptionKey
+	txnDescriptionCtxKey
+
+	// txnSimulationCtxKey is a key under which option enabling txn simulation
+	// is stored into the context.
+	txnSimulationCtxKey
 )
 
 // modifiable default parameters for the *retry* txn option
@@ -231,15 +235,37 @@ type txnDescriptionOpt struct {
 // provided.
 // By default, transactions are without description.
 func WithDescription(ctx context.Context, description string) context.Context {
-	return context.WithValue(ctx, txnDescriptionKey, &txnDescriptionOpt{description: description})
+	return context.WithValue(ctx, txnDescriptionCtxKey, &txnDescriptionOpt{description: description})
 }
 
 // IsWithDescription returns true if the transaction context is configured
 // to include transaction description.
 func IsWithDescription(ctx context.Context) (description string, withDescription bool) {
-	descriptionOpt, withDescription := ctx.Value(txnDescriptionKey).(*txnDescriptionOpt)
+	descriptionOpt, withDescription := ctx.Value(txnDescriptionCtxKey).(*txnDescriptionOpt)
 	if !withDescription {
 		return "", false
 	}
 	return descriptionOpt.description, true
 }
+
+/* Txn Simulation */
+
+// txnSimulationOpt represents the *txn-simulation* transaction option.
+type txnSimulationOpt struct {
+	// no attributes
+}
+
+// WithSimulation enables simulation of txn operations, which is triggered before
+// execution to obtain the sequence of intended operations without actually
+// calling any CRUD operations and assuming no failures.
+// By default, simulation is disabled.
+func WithSimulation(ctx context.Context) context.Context {
+	return context.WithValue(ctx, txnSimulationCtxKey, &txnSimulationOpt{})
+}
+
+// IsWithSimulation returns true if transaction context is configured to enable
+// pre-execution simulation.
+func IsWithSimulation(ctx context.Context) bool {
+	_, withSimulation := ctx.Value(txnSimulationCtxKey).(*txnSimulationOpt)
+	return withSimulation
+}
\ No newline at end of file
diff --git a/plugins/kvscheduler/internal/graph/graph_api.go b/plugins/kvscheduler/internal/graph/graph_api.go
index 82d0d46..ea2a59e 100644
--- a/plugins/kvscheduler/internal/graph/graph_api.go
+++ b/plugins/kvscheduler/internal/graph/graph_api.go
@@ -28,18 +28,19 @@ import (
 )
 
 // Graph is an in-memory graph representation of key-value pairs and their
-// relations, where nodes are kv-pairs and each relation is a separate set of direct
-// labeled edges.
+// relations, where nodes are kv-pairs and each relation is a separate set of
+// direct labeled edges.
 //
-// The graph furthermore allows to associate metadata and flags (name:value pairs)
-// with every node. It is possible to register instances of NamedMapping, each
-// for a different set of selected nodes, and the graph will keep them up-to-date
-// with the latest value-label->metadata associations.
+// The graph furthermore allows to associate metadata and flags (idx/name:value
+// pairs) with every node. It is possible to register instances of NamedMapping,
+// each for a different set of selected nodes, and the graph will keep them
+// up-to-date with the latest value-label->metadata associations.
 //
 // The graph provides various getter method, for example it is possible to select
 // a set of nodes using a key selector and/or a flag selector.
-// As for editing, Graph allows to prepare new changes and then save them or let
-// them get discarded by GC.
+// As for editing, Graph allows to either write in-place (immediate effect)
+// or to prepare new changes and then save them later or let them get discarded
+// by GC.
 //
 // The graph supports multiple-readers single-writer access, i.e. it is assumed
 // there is no write-concurrency.
@@ -56,11 +57,14 @@ type Graph interface {
 	// Write returns a graph handle for read-write access.
 	// The graph supports at most one writer at a time - i.e. it is assumed
 	// there is no write-concurrency.
-	// The changes are propagated to the graph using Save().
+	// If <inPlace> is enabled, the changes are applied with immediate effect,
+	// otherwise they are propagated to the graph using Save().
+	// In-place Write handle holds write lock, therefore reading is blocked until
+	// the handle is released.
 	// If <record> is true, the changes will be recorded once the handle is
 	// released.
 	// Release eventually using Release() method.
-	Write(record bool) RWAccess
+	Write(inPlace, record bool) RWAccess
 }
 
 // ReadAccess lists operations provided by the read-only graph handle.
@@ -94,7 +98,9 @@ type ReadAccess interface {
 
 	// Release releases the graph handle (both Read() & Write() should end with
 	// release).
-	Release() // for reader release R-lock
+	// For reader, the method releases R-lock.
+	// For in-place writer, the method releases W-lock.
+	Release()
 }
 
 // RWAccess lists operations provided by the read-write graph handle.
@@ -106,7 +112,8 @@ type RWAccess interface {
 	RegisterMetadataMap(mapName string, mapping idxmap.NamedMappingRW)
 
 	// SetNode creates new node or returns read-write handle to an existing node.
-	// The changes are propagated to the graph only after Save() is called.
+	// If in-place writing is disabled, the changes are propagated to the graph
+	// only after Save() is called.
 	SetNode(key string) NodeRW
 
 	// DeleteNode deletes node with the given key.
@@ -114,7 +121,9 @@ type RWAccess interface {
 	DeleteNode(key string) bool
 
 	// Save propagates all changes to the graph.
-	Save() // noop if no changes performed, acquires RW-lock for the time of the operation
+	// Use for **not-in-place** writing.
+	// NOOP if no changes performed, acquires RW-lock for the time of the operation
+	Save()
 }
 
 // Node is a read-only handle to a single graph node.
@@ -219,7 +228,7 @@ type RelationTargetDef struct {
 	Key string
 
 	// Selector selecting a set of target nodes.
-	Selector KeySelector
+	Selector KeySelector // TODO: further restrict the set of candidates using key prefixes
 }
 
 // Targets groups relation targets with the same label.
@@ -231,7 +240,8 @@ type Targets struct {
 	MatchingKeys utils.KeySet
 }
 
-// TargetsByLabel is a slice of single-relation targets, grouped (and sorted) by labels.
+// TargetsByLabel is a slice of single-relation targets, grouped (and sorted)
+// by labels.
 type TargetsByLabel []*Targets
 
 // String returns human-readable string representation of TargetsByLabel.
diff --git a/plugins/kvscheduler/internal/graph/graph_impl.go b/plugins/kvscheduler/internal/graph/graph_impl.go
index 6661aa4..5bee405 100644
--- a/plugins/kvscheduler/internal/graph/graph_impl.go
+++ b/plugins/kvscheduler/internal/graph/graph_impl.go
@@ -84,11 +84,19 @@ func (kvgraph *kvgraph) Read() ReadAccess {
 // Write returns a graph handle for read-write access.
 // The graph supports at most one writer at a time - i.e. it is assumed
 // there is no write-concurrency.
-// The changes are propagated to the graph using Save().
+// If <inPlace> is enabled, the changes are applied with immediate effect,
+// otherwise they are propagated to the graph using Save().
+// In-place Write handle holds write lock, therefore reading is blocked until
+// the handle is released.
+// If <record> is true, the changes will be recorded once the handle is
+// released.
 // Release eventually using Release() method.
-func (kvgraph *kvgraph) Write(record bool) RWAccess {
+func (kvgraph *kvgraph) Write(inPlace, record bool) RWAccess {
 	if kvgraph.methodTracker != nil {
 		defer kvgraph.methodTracker("Write")()
 	}
-	return newGraphRW(kvgraph.graph, record)
+	if inPlace {
+		kvgraph.rwLock.Lock()
+	}
+	return newGraphRW(kvgraph.graph, inPlace, record)
 }
diff --git a/plugins/kvscheduler/internal/graph/graph_read.go b/plugins/kvscheduler/internal/graph/graph_read.go
index afed039..f13a35a 100644
--- a/plugins/kvscheduler/internal/graph/graph_read.go
+++ b/plugins/kvscheduler/internal/graph/graph_read.go
@@ -32,7 +32,9 @@ const printDelimiter = ", "
 // graphR implements ReadAccess.
 type graphR struct {
 	parent   *kvgraph
+
 	nodes    map[string]*node
+	overlay  map[string]*node
 	mappings map[string]idxmap.NamedMappingRW
 	timeline map[string][]*RecordedNode // key -> node records (from the oldest to the newest)
 }
@@ -41,6 +43,7 @@ type graphR struct {
 func newGraphR() *graphR {
 	return &graphR{
 		nodes:    make(map[string]*node),
+		overlay:  make(map[string]*node),
 		mappings: make(map[string]idxmap.NamedMappingRW),
 		timeline: make(map[string][]*RecordedNode),
 	}
@@ -57,13 +60,41 @@ func (graph *graphR) GetMetadataMap(mapName string) idxmap.NamedMapping {
 
 // GetNode returns node with the given key or nil if the key is unused.
 func (graph *graphR) GetNode(key string) Node {
-	node, has := graph.nodes[key]
+	node, has := graph.getNode(key)
 	if !has {
 		return nil
 	}
 	return node.nodeR
 }
 
+// getNode is an internal function which takes overlay into consideration.
+func (graph *graphR) getNode(key string) (node *node, has bool) {
+	node, has = graph.overlay[key]
+	if has {
+		if node == nil {
+			return nil, false // deleted in overlay
+		}
+		return node, true
+	}
+	node, has = graph.nodes[key]
+	return
+}
+
+// iterate allows to call given callback on every node in the graph.
+func (graph *graphR) iterate(cb func(key string, node *node)) {
+	for key, node := range graph.overlay {
+		if node == nil {
+			continue
+		}
+		cb(key, node)
+	}
+	for key, node := range graph.nodes {
+		if _, inOverlay := graph.overlay[key]; !inOverlay {
+			cb(key, node)
+		}
+	}
+}
+
 // GetNodes returns a set of nodes matching the key selector (can be nil)
 // and every provided flag selector.
 func (graph *graphR) GetNodes(keySelector KeySelector, flagSelectors ...FlagSelector) (nodes []Node) {
@@ -71,9 +102,9 @@ func (graph *graphR) GetNodes(keySelector KeySelector, flagSelectors ...FlagSele
 		defer graph.parent.methodTracker("GetNodes")()
 	}
 
-	for key, node := range graph.nodes {
+	graph.iterate(func(key string, node *node) {
 		if keySelector != nil && !keySelector(key) {
-			continue
+			return
 		}
 		selected := true
 		for _, flagSelector := range flagSelectors {
@@ -91,10 +122,10 @@ func (graph *graphR) GetNodes(keySelector KeySelector, flagSelectors ...FlagSele
 			}
 		}
 		if !selected {
-			continue
+			return
 		}
 		nodes = append(nodes, node.nodeR)
-	}
+	})
 	return nodes
 }
 
@@ -164,9 +195,9 @@ func (graph *graphR) GetKeys() []string {
 	}
 
 	var keys []string
-	for key := range graph.nodes {
+	graph.iterate(func(key string, node *node) {
 		keys = append(keys, key)
-	}
+	})
 	sort.Slice(keys, func(i, j int) bool {
 		return keys[i] < keys[j]
 	})
@@ -182,9 +213,9 @@ func (graph *graphR) Dump() string {
 
 	// order nodes by keys
 	var keys []string
-	for key := range graph.nodes {
+	graph.iterate(func(key string, node *node) {
 		keys = append(keys, key)
-	}
+	})
 	sort.Slice(keys, func(i, j int) bool {
 		return keys[i] < keys[j]
 	})
@@ -196,7 +227,7 @@ func (graph *graphR) Dump() string {
 	buf.WriteString("+======================================================================================================================+\n")
 
 	for i, key := range keys {
-		node := graph.nodes[key]
+		node, _ := graph.getNode(key)
 
 		buf.WriteString(fmt.Sprintf("| Key: %111q |\n", key))
 		if label := node.GetLabel(); label != key {
@@ -228,9 +259,10 @@ func (graph *graphR) Release() {
 	graph.parent.rwLock.RUnlock()
 }
 
+/*
 // copyNodesOnly returns a deep-copy of the graph, excluding the timelines
 // and the map with mappings.
-func (graph *graphR) copyNodesOnly() *graphR { // TODO: get rid of this
+func (graph *graphR) copyNodesOnly() *graphR {
 	graphCopy := &graphR{
 		parent: graph.parent,
 		nodes:  make(map[string]*node),
@@ -242,6 +274,7 @@ func (graph *graphR) copyNodesOnly() *graphR { // TODO: get rid of this
 	}
 	return graphCopy
 }
+*/
 
 // recordNode builds a record for the node to be added into the timeline.
 func (graph *graphR) recordNode(node *node, targetUpdateOnly bool) *RecordedNode {
diff --git a/plugins/kvscheduler/internal/graph/graph_write.go b/plugins/kvscheduler/internal/graph/graph_write.go
index 8817aa6..4c937b9 100644
--- a/plugins/kvscheduler/internal/graph/graph_write.go
+++ b/plugins/kvscheduler/internal/graph/graph_write.go
@@ -19,25 +19,37 @@ import (
 	"time"
 
 	"github.com/ligato/cn-infra/idxmap"
+	"github.com/ligato/vpp-agent/plugins/kvscheduler/internal/utils"
 )
 
 // graphRW implements RWAccess.
 type graphRW struct {
 	*graphR
-	record  bool
-	deleted []string
-	newRevs map[string]bool // key -> data-updated?
 
+	record   bool
+	wInPlace bool
+
+	newRevs  map[string]bool // key -> data-updated? (for Release)
 }
 
 // newGraphRW creates a new instance of grapRW, which extends an existing
 // graph with write-operations.
-func newGraphRW(graph *graphR, recordChanges bool) *graphRW {
-	graphRCopy := graph.copyNodesOnly()
+func newGraphRW(graph *graphR, wInPlace, recordChanges bool) *graphRW {
+	var gR *graphR
+	if wInPlace {
+		gR = graph
+	} else {
+		gR = &graphR{
+			parent:  graph.parent,
+			nodes:   graph.nodes,
+			overlay: make(map[string]*node),
+		}
+	}
 	return &graphRW{
-		graphR:  graphRCopy,
-		record:  recordChanges,
-		newRevs: make(map[string]bool),
+		graphR:   gR,
+		wInPlace: wInPlace,
+		record:   recordChanges,
+		newRevs:  make(map[string]bool),
 	}
 }
 
@@ -59,18 +71,45 @@ func (graph *graphRW) SetNode(key string) NodeRW {
 		defer graph.parent.methodTracker("SetNode")()
 	}
 
-	node, has := graph.nodes[key]
-	if has {
+	node := graph.setNode(key)
+	graph.iterate(func(key2 string, node2 *node) { // TODO: log(n) lookup
+		if key == key2 {
+			return
+		}
+		node2.checkPotentialTarget(node)
+	})
+
+	return node
+}
+
+// setNode is an internal function which takes overlay into consideration.
+func (graph *graphRW) setNode(key string) *node {
+	node, inOverlay := graph.overlay[key]
+	if inOverlay && node != nil {
 		return node
 	}
+	if !inOverlay {
+		if node, has := graph.nodes[key]; has {
+			if graph.wInPlace {
+				node.inOverlay = true
+				graph.overlay[key] = node
+				return node
+			} else {
+				nodeCopy := node.copy()
+				nodeCopy.graph = graph.graphR
+				node = newNode(nodeCopy)
+				node.inOverlay = true
+				graph.overlay[key] = node
+				return node
+			}
+		}
+	}
+
 	node = newNode(nil)
 	node.graph = graph.graphR
 	node.key = key
-	for _, otherNode := range graph.nodes { // TODO: maybe filter out nodes which are guaranteed to not have this as dep?
-		otherNode.checkPotentialTarget(node)
-	}
-	graph.nodes[key] = node
-
+	node.inOverlay = true
+	graph.overlay[key] = node
 	return node
 }
 
@@ -81,10 +120,15 @@ func (graph *graphRW) DeleteNode(key string) bool {
 		defer graph.parent.methodTracker("DeleteNode")()
 	}
 
-	node, has := graph.nodes[key]
-	if !has {
+	node, inOverlay := graph.overlay[key]
+	if inOverlay && node == nil {
 		return false
 	}
+	if !inOverlay {
+		if _, inUnderlay := graph.nodes[key]; !inUnderlay {
+			return false
+		}
+	}
 
 	// remove from sources of current targets
 	node.removeThisFromSources()
@@ -93,10 +137,10 @@ func (graph *graphRW) DeleteNode(key string) bool {
 	delete(graph.nodes, key)
 
 	// remove from targets of other nodes
-	for _, otherNode := range graph.nodes { // TODO: avoid iteration over all
+	for _, otherNode := range graph.nodes { // TODO: use sources for iteration
 		otherNode.removeFromTargets(key)
 	}
-	graph.deleted = append(graph.deleted, key)
+	graph.unsaved.Add(key)
 	return true
 }
 
@@ -106,42 +150,45 @@ func (graph *graphRW) Save() {
 		defer graph.parent.methodTracker("Save")()
 	}
 
-	graph.parent.rwLock.Lock()
-	defer graph.parent.rwLock.Unlock()
+	if !graph.wInPlace {
+		graph.parent.rwLock.Lock()
+		defer graph.parent.rwLock.Unlock()
+	}
 
 	destGraph := graph.parent.graph
 
-	// propagate newly registered mappings
-	for mapName, mapping := range graph.mappings {
-		if _, alreadyReg := destGraph.mappings[mapName]; !alreadyReg {
-			destGraph.mappings[mapName] = mapping
+	if !graph.wInPlace {
+		// propagate newly registered mappings
+		for mapName, mapping := range graph.mappings {
+			if _, alreadyReg := destGraph.mappings[mapName]; !alreadyReg {
+				destGraph.mappings[mapName] = mapping
+			}
 		}
 	}
 
-	// apply deleted nodes
-	for _, key := range graph.deleted {
-		if node, has := destGraph.nodes[key]; has {
-			// remove metadata
-			if node.metadataAdded {
-				if mapping, hasMapping := destGraph.mappings[node.metadataMap]; hasMapping {
-					mapping.Delete(node.label)
+	for _, key := range graph.unsaved.Iterate() {
+		node, found := graph.nodes[key]
+		deleted := !found
+
+		if deleted {
+			if !graph.wInPlace {
+				if node, has := destGraph.nodes[key]; has {
+					// remove metadata
+					if node.metadataAdded {
+						if mapping, hasMapping := destGraph.mappings[node.metadataMap]; hasMapping {
+							mapping.Delete(node.label)
+						}
+					}
+					// remove node from graph
+					delete(destGraph.nodes, key)
 				}
 			}
-			// remove node from graph
-			delete(destGraph.nodes, key)
-		}
-		graph.newRevs[key] = true
-	}
-	graph.deleted = []string{}
-
-	// apply new/changes nodes
-	for key, node := range graph.nodes { // TODO: this is expensive when everything is copied - iterate only over changed nodes
-		if !node.dataUpdated && !node.targetsUpdated && !node.sourcesUpdated {
-			continue
+		} else {
+			// created / updated
 		}
 
 		// update metadata
-		if !node.metaInSync {
+		if !graph.wInPlace && !node.metaInSync {
 			// update metadata map
 			if mapping, hasMapping := destGraph.mappings[node.metadataMap]; hasMapping {
 				if node.metadataAdded {
@@ -170,18 +217,20 @@ func (graph *graphRW) Save() {
 			graph.newRevs[key] = graph.newRevs[key] || node.dataUpdated
 		}
 
-		// copy changed node to the actual graph
-		nodeCopy := node.copy()
-		nodeCopy.graph = destGraph
-		destGraph.nodes[key] = newNode(nodeCopy)
+		if !graph.wInPlace {
+			// copy changed node to the actual graph
+			nodeCopy := node.copy()
+			nodeCopy.graph = destGraph
+			destGraph.nodes[key] = newNode(nodeCopy)
 
-		// use copy-on-write targets+sources for the write-handle
-		cowTargets := nodeCopy.targets
-		nodeCopy.targets = node.targets
-		node.targets = cowTargets
-		cowSources := nodeCopy.sources
-		nodeCopy.sources = node.sources
-		node.sources = cowSources
+			// use copy-on-write targets+sources for the write-handle
+			cowTargets := nodeCopy.targets
+			nodeCopy.targets = node.targets
+			node.targets = cowTargets
+			cowSources := nodeCopy.sources
+			nodeCopy.sources = node.sources
+			node.sources = cowSources
+		}
 
 		// working copy is now in-sync
 		node.dataUpdated = false
@@ -189,6 +238,8 @@ func (graph *graphRW) Save() {
 		node.sourcesUpdated = false
 		node.metaInSync = true
 	}
+
+	graph.unsaved = utils.NewSliceBasedKeySet()
 }
 
 // Release records changes if requested.
@@ -197,9 +248,17 @@ func (graph *graphRW) Release() {
 		defer graph.parent.methodTracker("Release")()
 	}
 
-	if graph.record && graph.parent.recordOldRevs {
-		graph.parent.rwLock.Lock()
+	if graph.wInPlace {
+		// update unsaved & newRevs
+		graph.Save()
 		defer graph.parent.rwLock.Unlock()
+	}
+
+	if graph.record && graph.parent.recordOldRevs {
+		if !graph.wInPlace {
+			graph.parent.rwLock.Lock()
+			defer graph.parent.rwLock.Unlock()
+		}
 
 		destGraph := graph.parent.graph
 		for key, dataUpdated := range graph.newRevs {
@@ -260,4 +319,4 @@ func (graph *graphRW) Release() {
 			graph.parent.lastRevTrimming = now
 		}
 	}
-}
+}
\ No newline at end of file
diff --git a/plugins/kvscheduler/internal/graph/node_read.go b/plugins/kvscheduler/internal/graph/node_read.go
index b6e7ac1..ab3de8d 100644
--- a/plugins/kvscheduler/internal/graph/node_read.go
+++ b/plugins/kvscheduler/internal/graph/node_read.go
@@ -25,6 +25,8 @@ import (
 // maximum number of flags allowed to have defined
 const maxFlags = 8
 
+// TODO: write metadata in-place
+
 // nodeR implements Node.
 type nodeR struct {
 	graph *graphR
@@ -214,7 +216,7 @@ func (node *nodeR) copy() *nodeR {
 	nodeCopy.metadataAdded = node.metadataAdded
 	nodeCopy.metadataMap = node.metadataMap
 
-	// copy flags
+	// copy flags (arrays are passed by value)
 	nodeCopy.flags = node.flags
 
 	// shallow-copy target definitions (immutable)
diff --git a/plugins/kvscheduler/internal/graph/node_write.go b/plugins/kvscheduler/internal/graph/node_write.go
index 902c49a..ac2a7a5 100644
--- a/plugins/kvscheduler/internal/graph/node_write.go
+++ b/plugins/kvscheduler/internal/graph/node_write.go
@@ -22,12 +22,23 @@ import (
 type node struct {
 	*nodeR
 
+	inOverlay      bool
 	metaInSync     bool
 	dataUpdated    bool
 	targetsUpdated bool
 	sourcesUpdated bool
 }
 
+func assert(condition bool, msg string) {
+	if !condition {
+		panic(msg)
+	}
+}
+
+func inOverlayCheck(node *node) {
+	assert(node.inOverlay, "node is not in the overlay")
+}
+
 // newNode creates a new instance of node, either built from the scratch or
 // extending existing nodeR.
 func newNode(nodeR *nodeR) *node {
@@ -46,18 +57,21 @@ func newNode(nodeR *nodeR) *node {
 
 // SetLabel associates given label with this node.
 func (node *node) SetLabel(label string) {
+	inOverlayCheck(node)
 	node.label = label
 	node.dataUpdated = true
 }
 
 // SetValue associates given value with this node.
 func (node *node) SetValue(value proto.Message) {
+	inOverlayCheck(node)
 	node.value = value
 	node.dataUpdated = true
 }
 
 // SetFlags associates given flag with this node.
 func (node *node) SetFlags(flags ...Flag) {
+	inOverlayCheck(node)
 	for _, flag := range flags {
 		node.flags[flag.GetIndex()] = flag
 	}
@@ -66,6 +80,7 @@ func (node *node) SetFlags(flags ...Flag) {
 
 // DelFlags removes given flag from this node.
 func (node *node) DelFlags(flagIndexes ...int) {
+	inOverlayCheck(node)
 	for _, idx := range flagIndexes {
 		node.flags[idx] = nil
 	}
@@ -75,6 +90,7 @@ func (node *node) DelFlags(flagIndexes ...int) {
 // SetMetadataMap chooses metadata map to be used to store the association
 // between this node's value label and metadata.
 func (node *node) SetMetadataMap(mapName string) {
+	inOverlayCheck(node)
 	if node.metadataMap == "" { // cannot be changed
 		node.metadataMap = mapName
 		node.dataUpdated = true
@@ -84,6 +100,7 @@ func (node *node) SetMetadataMap(mapName string) {
 
 // SetMetadata associates given value metadata with this node.
 func (node *node) SetMetadata(metadata interface{}) {
+	inOverlayCheck(node)
 	node.metadata = metadata
 	node.dataUpdated = true
 	node.metaInSync = false
@@ -163,12 +180,14 @@ func (node *node) SetTargets(targetsDef []RelationTargetDef) {
 			node.checkPotentialTarget(otherNode)
 		}
 	}
-
 }
 
 // checkPotentialTarget checks if node2 is target of node in any of the relations.
 func (node *node) checkPotentialTarget(node2 *node) {
 	targetDefs := node.targetsDef.getForKey("", node2.key) // for any relation
+	if len(targetDefs) > 0 {
+		node =
+	}
 	for _, targetDef := range targetDefs {
 		node.addToTargets(node2, targetDef)
 	}
@@ -220,11 +239,16 @@ func (node *node) addToTargets(node2 *node, targetDef RelationTargetDef) {
 
 // removeFromTargets removes given key from the set of targets.
 func (node *node) removeFromTargets(key string) {
+	var updated bool
 	for _, relTargets := range node.targets {
 		for _, targets := range relTargets.Targets {
-			node.targetsUpdated = targets.MatchingKeys.Del(key) || node.targetsUpdated
+			updated = targets.MatchingKeys.Del(key)
+			node.targetsUpdated = updated || node.targetsUpdated
 		}
 	}
+	if updated {
+		node.graph.unsaved.Add(node.key)
+	}
 }
 
 // removeFromTargets removes this node from the set of sources of all the other nodes.
@@ -243,4 +267,7 @@ func (node *node) removeThisFromSources() {
 func (node *node) removeFromSources(relation string, key string) {
 	updated := node.sources.getSourcesForRelation(relation).sources.Del(key)
 	node.sourcesUpdated = updated || node.sourcesUpdated
+	if updated {
+		node.graph.unsaved.Add(node.key)
+	}
 }
diff --git a/plugins/kvscheduler/internal/graph/utils_for_test.go b/plugins/kvscheduler/internal/graph/utils_for_test.go
index 7dffecb..bf45a04 100644
--- a/plugins/kvscheduler/internal/graph/utils_for_test.go
+++ b/plugins/kvscheduler/internal/graph/utils_for_test.go
@@ -84,7 +84,7 @@ func buildGraph(graph Graph, record, regMaps bool, nodes map[int]struct{}) Graph
 	if graph == nil {
 		graph = NewGraph(commonOpts)
 	}
-	graphW := graph.Write(record)
+	graphW := graph.Write(false, record)
 
 	if regMaps {
 		graphW.RegisterMetadataMap(metadataMapA, NewNameToInteger(metadataMapA))
diff --git a/plugins/kvscheduler/plugin_scheduler.go b/plugins/kvscheduler/plugin_scheduler.go
index 106a461..23c7f5c 100644
--- a/plugins/kvscheduler/plugin_scheduler.go
+++ b/plugins/kvscheduler/plugin_scheduler.go
@@ -230,9 +230,8 @@ func (s *Scheduler) RegisterKVDescriptor(descriptor *kvs.KVDescriptor) error {
 		} else {
 			metadataMap = mem.NewNamedMapping(s.Log, descriptor.Name, nil)
 		}
-		graphW := s.graph.Write(false)
+		graphW := s.graph.Write(true,false)
 		graphW.RegisterMetadataMap(descriptor.Name, metadataMap)
-		graphW.Save()
 		graphW.Release()
 	}
 	return nil
@@ -432,6 +431,7 @@ func (txn *SchedulerTxn) Commit(ctx context.Context) (txnSeqNum uint64, err erro
 	txnData.nb.retryArgs, txnData.nb.retryEnabled = kvs.IsWithRetry(ctx)
 	txnData.nb.revertOnFailure = kvs.IsWithRevert(ctx)
 	txnData.nb.description, _ = kvs.IsWithDescription(ctx)
+	txnData.nb.withSimulation = kvs.IsWithSimulation(ctx)
 
 	// validate transaction options
 	if txnData.nb.resyncType == kvs.DownstreamResync && len(txnData.values) > 0 {
diff --git a/plugins/kvscheduler/refresh.go b/plugins/kvscheduler/refresh.go
index b4a593a..c84bdb9 100644
--- a/plugins/kvscheduler/refresh.go
+++ b/plugins/kvscheduler/refresh.go
@@ -192,10 +192,6 @@ func (s *Scheduler) refreshGraph(graphW graph.RWAccess,
 				}
 			}
 		}
-
-		// in-progress save to expose changes in the metadata for Retrieve-s
-		// of the following descriptors
-		graphW.Save()
 	}
 
 	// update state of values that do not actually exist
diff --git a/plugins/kvscheduler/txn_exec.go b/plugins/kvscheduler/txn_exec.go
index e3313d2..0e2517e 100644
--- a/plugins/kvscheduler/txn_exec.go
+++ b/plugins/kvscheduler/txn_exec.go
@@ -54,7 +54,7 @@ type applyValueArgs struct {
 // executeTransaction executes pre-processed transaction.
 // If <dry-run> is enabled, Validate/Create/Delete/Update operations will not be executed
 // and the graph will be returned to its original state at the end.
-func (s *Scheduler) executeTransaction(txn *transaction, dryRun bool) (executed kvs.RecordedTxnOps) {
+func (s *Scheduler) executeTransaction(txn *transaction, graphW graph.RWAccess, dryRun bool) (executed kvs.RecordedTxnOps) {
 	op := "execute transaction"
 	if dryRun {
 		op = "simulate transaction"
@@ -66,8 +66,6 @@ func (s *Scheduler) executeTransaction(txn *transaction, dryRun bool) (executed
 		fmt.Printf("%s %s\n", nodeVisitBeginMark, msg)
 		defer fmt.Printf("%s %s\n", nodeVisitEndMark, msg)
 	}
-	downstreamResync := txn.txnType == kvs.NBTransaction && txn.nb.resyncType == kvs.DownstreamResync
-	graphW := s.graph.Write(!downstreamResync)
 	branch := utils.NewMapBasedKeySet() // branch of current recursive calls to applyValue used to handle cycles
 	applied := utils.NewMapBasedKeySet()
 
@@ -94,9 +92,9 @@ func (s *Scheduler) executeTransaction(txn *transaction, dryRun bool) (executed
 		if err != nil {
 			if txn.txnType == kvs.NBTransaction && txn.nb.revertOnFailure {
 				// refresh failed value and trigger reverting
+				// (not dry-run)
 				failedKey := utils.NewSingletonKeySet(kv.key)
 				s.refreshGraph(graphW, failedKey, nil, true)
-				graphW.Save() // certainly not dry-run
 				revert = true
 				break
 			}
@@ -105,8 +103,7 @@ func (s *Scheduler) executeTransaction(txn *transaction, dryRun bool) (executed
 
 	if revert {
 		// record graph state in-between failure and revert
-		graphW.Release()
-		graphW = s.graph.Write(true)
+		graphW = s.graph.Write(!dryRun,true)
 
 		// revert back to previous values
 		for _, kvPair := range prevValues {
@@ -131,8 +128,6 @@ func (s *Scheduler) executeTransaction(txn *transaction, dryRun bool) (executed
 
 	// get rid of uninteresting intermediate pending Create/Delete operations
 	executed = s.compressTxnOps(executed)
-
-	graphW.Release()
 	return executed
 }
 
@@ -252,9 +247,6 @@ func (s *Scheduler) applyDelete(node graph.NodeRW, txnOp *kvs.RecordedTxnOp, arg
 		endLog := s.logNodeVisit("applyDelete", args)
 		defer endLog()
 	}
-	if !args.dryRun {
-		defer args.graphW.Save()
-	}
 
 	if node.GetValue() == nil {
 		// remove value that does not exist => noop (do not even record)
@@ -365,9 +357,6 @@ func (s *Scheduler) applyCreate(node graph.NodeRW, txnOp *kvs.RecordedTxnOp, arg
 		endLog := s.logNodeVisit("applyCreate", args)
 		defer endLog()
 	}
-	if !args.dryRun {
-		defer args.graphW.Save()
-	}
 	node.SetValue(args.kv.value)
 
 	// get descriptor
@@ -475,9 +464,6 @@ func (s *Scheduler) applyCreate(node graph.NodeRW, txnOp *kvs.RecordedTxnOp, arg
 	}
 	s.updateNodeState(node, txnOp.NewState, args)
 	executed = append(executed, txnOp)
-	if !args.dryRun {
-		args.graphW.Save()
-	}
 
 	// update values that depend on this kv-pair
 	depExecs, inheritedErr := s.runDepUpdates(node, args)
@@ -513,9 +499,6 @@ func (s *Scheduler) applyUpdate(node graph.NodeRW, txnOp *kvs.RecordedTxnOp, arg
 		endLog := s.logNodeVisit("applyUpdate", args)
 		defer endLog()
 	}
-	if !args.dryRun {
-		defer args.graphW.Save()
-	}
 
 	// validate new value
 	descriptor := s.registry.GetDescriptorForKey(args.kv.key)
@@ -644,11 +627,6 @@ func (s *Scheduler) applyUpdate(node graph.NodeRW, txnOp *kvs.RecordedTxnOp, arg
 		}
 	}
 
-	// save before going into derived values
-	if !args.dryRun {
-		args.graphW.Save()
-	}
-
 	if !args.isDerived {
 		// update/create derived values
 		var derivedVals []kvForTxn
diff --git a/plugins/kvscheduler/txn_process.go b/plugins/kvscheduler/txn_process.go
index 32b223f..1a8f4ae 100644
--- a/plugins/kvscheduler/txn_process.go
+++ b/plugins/kvscheduler/txn_process.go
@@ -60,6 +60,7 @@ type nbTxn struct {
 	retryArgs    *kvs.RetryOpt
 
 	revertOnFailure bool
+	withSimulation  bool
 	description     string
 	resultChan      chan txnResult
 }
@@ -115,17 +116,24 @@ func (s *Scheduler) processTransaction(txn *transaction) {
 	startTime := time.Now()
 
 	// 1. Pre-processing:
-	skipTxnExec := s.preProcessTransaction(txn)
+	skipExec, skipSimulation, record := s.preProcessTransaction(txn)
 
 	// 2. Ordering:
-	if !skipTxnExec {
+	if !skipExec {
 		txn.values = s.orderValuesByOp(txn.values)
 	}
 
 	// 3. Simulation:
 	var simulatedOps kvs.RecordedTxnOps
-	if !skipTxnExec {
-		simulatedOps = s.executeTransaction(txn, true)
+	if !skipSimulation {
+		graphW := s.graph.Write(false, record)
+		simulatedOps = s.executeTransaction(txn, graphW, true)
+		if len(simulatedOps) == 0 {
+			// nothing to execute
+			graphW.Save()
+			skipExec = true
+		}
+		graphW.Release()
 	}
 
 	// 4. Pre-recording
@@ -133,8 +141,10 @@ func (s *Scheduler) processTransaction(txn *transaction) {
 
 	// 5. Execution:
 	var executedOps kvs.RecordedTxnOps
-	if !skipTxnExec {
-		executedOps = s.executeTransaction(txn, false)
+	if !skipExec {
+		graphW := s.graph.Write(true, record)
+		executedOps = s.executeTransaction(txn, graphW, false)
+		graphW.Release()
 	}
 
 	stopTime := time.Now()
@@ -148,7 +158,7 @@ func (s *Scheduler) processTransaction(txn *transaction) {
 
 // preProcessTransaction initializes transaction parameters, filters obsolete retry
 // operations and refreshes the graph for resync.
-func (s *Scheduler) preProcessTransaction(txn *transaction) (skip bool) {
+func (s *Scheduler) preProcessTransaction(txn *transaction) (skipExec, skipSimulation, record bool) {
 	defer trace.StartRegion(txn.ctx, "preProcessTransaction").End()
 
 	// allocate new transaction sequence number
@@ -157,14 +167,20 @@ func (s *Scheduler) preProcessTransaction(txn *transaction) (skip bool) {
 
 	switch txn.txnType {
 	case kvs.SBNotification:
-		skip = s.preProcessNotification(txn)
+		skipExec = s.preProcessNotification(txn)
+		skipSimulation = true
+		record = true
 	case kvs.NBTransaction:
-		skip = s.preProcessNBTransaction(txn)
+		skipExec = s.preProcessNBTransaction(txn)
+		skipSimulation = skipExec || !txn.nb.withSimulation
+		record = txn.nb.resyncType != kvs.DownstreamResync
 	case kvs.RetryFailedOps:
-		skip = s.preProcessRetryTxn(txn)
+		skipExec = s.preProcessRetryTxn(txn)
+		skipSimulation = skipExec
+		record = true
 	}
 
-	return skip
+	return
 }
 
 // preProcessNotification filters out non-valid SB notification.
@@ -185,9 +201,8 @@ func (s *Scheduler) preProcessNBTransaction(txn *transaction) (skip bool) {
 	}
 
 	// for resync refresh the graph + collect deletes
-	graphW := s.graph.Write(false)
+	graphW := s.graph.Write(true,false)
 	defer graphW.Release()
-	defer graphW.Save()
 	s.resyncCount++
 
 	if txn.nb.resyncType == kvs.DownstreamResync {
@@ -319,9 +334,8 @@ func (s *Scheduler) postProcessTransaction(txn *transaction, executed kvs.Record
 	// refresh base values which themselves are in a failed state or have derived failed values
 	// - in verifyMode all updated values are re-freshed
 	if toRefresh.Length() > 0 {
-		graphW := s.graph.Write(false)
+		graphW := s.graph.Write(true,false)
 		s.refreshGraph(graphW, toRefresh, nil, verboseRefresh)
-		graphW.Save()
 
 		// split values based on the retry metadata
 		retryTxns := make(map[retryTxnMeta]*retryTxn)
@@ -492,11 +506,10 @@ func (s *Scheduler) postProcessTransaction(txn *transaction, executed kvs.Record
 
 	// delete removed values from the graph after the notifications have been sent
 	if removed.Length() > 0 {
-		graphW := s.graph.Write(true)
+		graphW := s.graph.Write(true,true)
 		for _, key := range removed.Iterate() {
 			graphW.DeleteNode(key)
 		}
-		graphW.Save()
 		graphW.Release()
 	}
 }
